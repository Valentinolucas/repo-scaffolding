name: Terraform Infrastructure Change Management Pipeline with GitHub Actions

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      BUCKET_TF_STATE:
        required: true

jobs:
  terraform:
    name: Terraform Infrastructure Change Management
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     shell: bash
    #     working-directory: terraform

    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v2

      # - name: Setup Terraform with specified version on the runner
      #   uses: hashicorp/setup-terraform@v2
      #   with:
      #     terraform_version: 1.3.0

      - name: Terraform init
        id: init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.0
          tf_actions_subcommand: "init"
          tf_actions_working_dir: terraform
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform validate
        id: init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.0
          tf_actions_subcommand: "validate"
          tf_actions_working_dir: terraform

      - name: Terraform plan
        id: init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 1.3.0
          tf_actions_subcommand: "plan"
          tf_actions_working_dir: terraform


      # - name: Terraform format
      #   id: fmt
      #   run: terraform fmt -check

      # - name: Terraform validate
      #   id: validate
      #   run: terraform validate

      # - name: Terraform plan
      #   id: plan
      #   if: github.event_name == 'pull_request'
      #   run: terraform plan -no-color -input=false
      #   continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   run: terraform apply -auto-approve -input=false
